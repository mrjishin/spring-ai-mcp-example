plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'kr.co.piconet'
version = '0.0.1-SNAPSHOT'

java {
//	toolchain {
//		languageVersion = JavaLanguageVersion.of(17)
//	}
  sourceCompatibility = JavaLanguageVersion.of(17)
  targetCompatibility = JavaLanguageVersion.of(17)
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springAiVersion', "1.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.ai:spring-ai-starter-mcp-server-webmvc'
	//implementation 'org.springframework.ai:spring-ai-mcp-server-webmvc-spring-boot-starter'
	runtimeOnly 'com.mysql:mysql-connector-j'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
  	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
  	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
  	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

def querydslDir = "$buildDir/querydsl/generated"

tasks.withType(JavaCompile) {
//	options.compilerArgs.add('-parameters')
  	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

sourceSets {
  main {
    java {
      srcDirs += querydslDir
    }
  }
}

clean {
  delete file(querydslDir)
}

tasks.jar {
    archiveFileName.set("${archiveBaseName.get()}.${archiveExtension.get()}")
}

bootJar {
   archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

tasks.named('test') {
	useJUnitPlatform()
}
